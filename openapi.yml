openapi: 3.0.0
info:
  title: Log Play App API
  version: 1.1.0
paths:
  /games/log:
    put:
      summary: Performs put operation on each game record inside a log
      security:
        - ApiKeyAuth: []
      parameters:
        - name: User-Name
          in: header
          description: If absent, a global user will be used
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GamesLog'
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        '400':
          description: Unsupported JSON input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutGamesLog.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    get:
      summary: Get log of all games
      security:
        - ApiKeyAuth: []
      parameters:
        - name: User-Name
          in: header
          description: If absent, a global user will be used
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamesLog'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGamesLog.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT'"
            responseTemplates:
              application/json: ''
      responses:
        '204':
          description: No content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
  /games:
    get:
      summary: Get specific game record
      security:
        - ApiKeyAuth: []
      parameters:
        - name: User-Name
          in: header
          required: false
          schema:
            type: string
        - name: timestamp
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameRecord'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGameRecord.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    put:
      summary: Put a single game record
      security:
        - ApiKeyAuth: []
      parameters:
        - name: User-Name
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameRecord'
      responses:
        '200':
          description: OK
        '400':
          description: Unsupported JSON input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutGameRecord.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 204}'
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT'"
            responseTemplates:
              application/json: ''
      responses:
        '204':
          description: No content
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
  /healthcheck:
    get:
      summary: Health check for Games Log database
      parameters:
        - name: User-Name
          in: header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckLambda.Arn}/invocations
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Api-Key
  schemas:
    GamesLog:
      type: object
      properties:
        gamesLog:
          type: array
          items:
            $ref: '#/components/schemas/GameRecord'
    GameRecord:
      type: object
      required: [ timestamp, gameDate, playerResults ]
      properties:
        timestamp:
          type: integer
          format: int64
        gameDate:
          type: string
          format: date
        playerResults:
          type: array
          items:
            type: object
            required: [ playerName ]
            properties:
              playerName:
                type: string
              playerScore:
                type: integer
              isWinner:
                type: boolean
                default: false
              comment:
                type: string
    Error:
      type: object
      required: [ errorCause ]
      properties:
        errorCause:
          type: string
        exception:
          type: string
        details:
          type: string
